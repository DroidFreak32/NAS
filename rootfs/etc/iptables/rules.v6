# Generated by ip6tables-save v1.8.7 on Fri Aug 12 10:26:25 2022
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Add custom Docker chain to prevent unexpected firewall bypass [1/2]
# https://old.reddit.com/r/selfhosted/comments/ocqg1j/psa_docker_bypasses_ufw/h3w6tec/
:DOCKER-USER - [0:0]

# Defining custom chain to Log and ACCEPT/DROP
# https://stackoverflow.com/a/29544353/6437140
:LOG_ACCEPT - [0:0]
:LOG_DROP - [0:0]
-A LOG_ACCEPT -j LOG --log-level 6 --log-prefix "INPUT:ACCEPT: "
-A LOG_ACCEPT -j ACCEPT
-A LOG_DROP -j LOG --log-level 6 --log-prefix "INPUT:DROP: "
-A LOG_DROP -j DROP

# This accepts ongoing traffic for any existing connections that we've already accepted through other rule
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# Accept all ICMP packets. Unlike with IPv4, it's not a good idea to block ICMPv6 traffic as IPv6 is much more heavily dependent on it
-A INPUT -p ipv6-icmp -j ACCEPT

# Accept all traffic from/to the local interface:
-A INPUT -i lo -j ACCEPT

# Allow traffic for link-local addresses:
-A INPUT -s fe80::/10 -j ACCEPT

# Accept DHCPv6 traffic. If you use stateless autoconfiguration, or statically configure your machines, this is not necessary
-A INPUT -d fe80::/64 -p udp -m udp --dport 546 -m state --state NEW -j ACCEPT


# ----------------------------------------------------------------------------------------
# Custom rules go here
#
# ip6tables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
# ----------------------------------------------------------------------------------------

# Allow forwarding on LAN and PPP interface.
-A FORWARD -i ppp0 -j ACCEPT
-A FORWARD -i vmbr0 -j ACCEPT

# Add custom Docker chain to prevent unexpected firewall bypass [2/2]
## https://old.reddit.com/r/selfhosted/comments/ocqg1j/psa_docker_bypasses_ufw/h3w6tec/
-A DOCKER-USER -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

## This will only expose the containers that listen on port 80 & 443.
## Rest all the containers will not be accessible from the internet even no matter if they port-forward
### Update:  Needed here as I am only using IPv6 to expose - this should be done under ip6tables rules
-A DOCKER-USER -p tcp -m multiport --dports 80,443,9001 -j LOG_ACCEPT

## Allow "docker" ipset to query DNS & wireguard server's UDP port
## This fixes wgproxy unable to resolve & connect to domains.
## sudo ipset create docker-ipv6 hash:net; sudo ipset add docker-ipv6 fd00:bad:c0de::/48
# -A DOCKER-USER -m set --match-set docker-ipv6 src -p udp -m multiport --dports 53,80,443 -j ACCEPT
# ## Same but also allow incoming requests from docker containers to connect to HTTP/HTTPS sites
# -A DOCKER-USER -m set --match-set docker-ipv6 src -p tcp -m multiport --dports 80,443 -j ACCEPT
## Alternatively, allow containers to access everything
-A DOCKER-USER -m set --match-set docker-ipv6 src -j ACCEPT
-A DOCKER-USER -j DROP

# Allow full access for my trusted IPSet
-A INPUT -m set --match-set trusted-v6 src -j ACCEPT

# Allow full access for LAN IPSet
-A INPUT -m set --match-set lan-v6 src -j ACCEPT

-A INPUT -s fc00::/7 -p tcp -m multiport --dports 53,80,443,1080,1714:1764,2209,5900,9090,19999 -j ACCEPT -m comment --comment "Allows LAN devices to access to known services (DNS, HTTP(s), Dispatch-Proxy, KDEConnect, SSH, VNC, Cockpit, Netdata)"
-A INPUT -s fc00::/7 -p udp -m multiport --dports 53,80,443,1080,1714:1764,2209,5900,9090,19999 -j ACCEPT -m comment --comment "Allows LAN devices to access to known services (DNS, HTTP(s), Dispatch-Proxy, KDEConnect, SSH, VNC, Cockpit, Netdata)"

-A INPUT -p udp -m multiport --dports 443,9001,47111,47112,47963:47969 -j ACCEPT -m comment --comment "Allow HTTPS, IRC Relay, WireGuard & Torrent ports"
-A INPUT -p tcp -m multiport --dports 443,9001,47111,47112,47963:47969 -j ACCEPT -m comment --comment "Allow HTTPS, IRC Relay, WireGuard & Torrent ports"

# At the end of our rules, we reject all traffic that didn't match a rule, using "port unreachable".
# This results in the standard "Connection refused" message at the other end, and effectively hides the fact that we have a firewall.
# Tools such as nmap will report that all our ports are "closed" rather than "filtered"
# and have a much more difficult time determining that we even have a firewall.
-A INPUT -j REJECT --reject-with icmp6-adm-prohibited

COMMIT
# Completed on Fri Aug 12 10:26:25 2022
# Generated by ip6tables-save v1.8.7 on Fri Aug 12 10:26:25 2022
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# -A POSTROUTING -o br0 -m comment --comment "JioFi Support" -j MASQUERADE
COMMIT
# Completed on Fri Aug 12 10:26:25 2022
