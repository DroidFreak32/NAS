version: '3'
name: public-containers

services:

# Arch, btw
  mirror:
    build:
      context: .
      dockerfile: Dockerfiles/fancyindex.Dockerfile
      # Avoid strict firewall rules blocking access to internet during build
      network: host
    image: alpine-nginx-site-fancyindex:latest
    container_name: mirror
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # restart: unless-stopped
    # ports:
    #   - 80:80
    #   - 443:443
    environment:
      - DOMAIN=${TRAEFIK_PUBLIC_DOMAIN}
      - SUBDOMAIN=mirror
    volumes:
      # Rsync crontab syncs the mirror
      - /srv/http/mirror/archlinux:/srv/http/mirror/archlinux:ro
      # My TLS certificates from certbot
      - letsencrypt:/etc/letsencrypt:ro
      # Certbot renewal challenges
      ## Update - Not needed due to DNS chllenge
      # - acme-challenge:/var/www/.well-known/acme-challenge
      # Allow to write {access,error}.log
      - /var/log/nginx/mirror.$TRAEFIK_PUBLIC_DOMAIN:/var/log/nginx/mirror.$TRAEFIK_PUBLIC_DOMAIN
      # Main Nginx config containing environment variables
      - ./sites/mirror/mirror.conf:/etc/nginx/templates/template.conf:ro
      # the-eye.eu theme
      - ./sites/mirror/indexui:/var/www/indexui:ro
      # Nginx proxy config for transfer.sh
      # - ./sites/transfer/transfer.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/transfer.$TRAEFIK_PUBLIC_DOMAIN.conf
      # Weechat relay blank page for certbot
      # - ./sites/irc-relay/irc.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/irc.$TRAEFIK_PUBLIC_DOMAIN.conf
      # Nginx proxy config for Your Spotify
      # - ./sites/your-spotify/yspot.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/yspot.$TRAEFIK_PUBLIC_DOMAIN.conf
      # Nginx proxy config for Your Spotify server
      # - ./sites/your-spotify/yspot-api.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/yspot-api.$TRAEFIK_PUBLIC_DOMAIN.conf
      - ./Dockerfiles/fancyindex_entry.sh:/entrypoint.sh:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mirror.rule=Host(`mirror.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.mirror.entrypoints=web"
      - "traefik.http.services.mirror.loadbalancer.server.port=80"

      # Manually forcing https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.mirror.middlewares=redirect-to-https"
      # Instead of above, you can also use any existing Middleware in the traefik yml config's Dynamic Config section
      # comment above two lines and uncomment this
      # - "traefik.http.routers.mirror.middlewares=https-redirectscheme@file"

      # Needs another router for HTTPS
      - "traefik.http.routers.mirror_sec.rule=Host(`mirror.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.mirror_sec.entrypoints=websecure"
      - "traefik.http.routers.mirror_sec.tls=true"
    # entrypoint: /bin/sh -c "sleep 99999"


  transfer:
    image: dutchcoders/transfer.sh:latest
    container_name: transfer
    command: "--provider local \
      --temp-path /transfer/ \
      --basedir /transfer/ \
      --max-upload-size 3221225 \
      --purge-days 1 \
      --purge-interval 1"
    # ports:
    #   - 8080:8080
    volumes:
      - /srv/transfer:/transfer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transfer.rule=Host(`transfer.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.transfer.entrypoints=web"
      - "traefik.http.services.transfer.loadbalancer.server.port=8080"

      # Manually forcing https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.transfer.middlewares=redirect-to-https"
      # Instead of above, you can also use any existing Middleware in the traefik yml config's Dynamic Config section
      # comment above two lines and add uncomment this
      # - "traefik.http.routers.transfer.middlewares=https-redirectscheme@file"

      # Needs another router for HTTPS
      - "traefik.http.routers.transfer_sec.rule=Host(`transfer.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.transfer_sec.entrypoints=websecure"
      - "traefik.http.routers.transfer_sec.tls=true"


  irc-relay:
    build:
      # Pass UID and GID from env to dockerfile to create non-root user in image
      args:
        UID: "${UID}"
        GID: "${GID}"
      context: .
      dockerfile: Dockerfiles/weechat.Dockerfile
      # Avoid strict firewall rules blocking access to internet during build
      network: host
    # Name and tag of the image
    image: weechat-relay:latest
    container_name: weechat
    environment:
      - MY_DOMAIN=$TRAEFIK_PUBLIC_DOMAIN
      - WEECHAT_HOME=${WEECHAT_HOME}
      - WEECHAT_PASSPHRASE=${WEECHAT_PASSPHRASE}
    # tty: true
    # Run as the current UID:GID of host executing this
    # user: "${UID}:${GID}"
    ports:
      - 9001:9001
    volumes:
      - letsencrypt:/etc/letsencrypt/live:ro
      - ./sites/irc-relay:/weechat
      - ./Dockerfiles/weechat_entry.sh:/weechat_entry.sh
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.irc.rule=Host(`irc.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.irc.entrypoints=web"
      # - "traefik.http.services.irc.loadbalancer.servers.url[0]=http://irc-relay:9001"

      # Manually forcing https
      - "traefik.http.routers.irc.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Needs another router for HTTPS
      - "traefik.http.routers.irc_sec.rule=Host(`irc.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.irc_sec.entrypoints=websecure"
      - "traefik.http.routers.irc_sec.tls=true"
      - "traefik.http.routers.irc_sec.middlewares=redirect-to-glowingbear"

      # # Manually forcing redirect to glowing bear
      - "traefik.http.middlewares.redirect-to-glowingbear.redirectregex.regex=(.*)"
      - "traefik.http.middlewares.redirect-to-glowingbear.redirectregex.replacement=https://latest.glowing-bear.org/"
      - "traefik.http.middlewares.redirect-to-glowingbear.redirectregex.permanent=false"
    # entrypoint: /bin/sh -c "sleep 99999"

  # Mess with script kiddies
  endlessh:
    image: lscr.io/linuxserver/endlessh:latest
    container_name: endlessh
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=Etc/UTC
      - MSDELAY=10000 #optional
      - MAXLINES=32 #optional
      - MAXCLIENTS=4096 #optional
      - LOGFILE=true #optional
      # - BINDFAMILY= #optional
    volumes:
      - /var/log:/config/logs #optional
    ports:
      - 22:2222

volumes:
  letsencrypt:
    external: true
  # Update - Not needed due to DNS chllenge
  # acme-challenge:
  #   external: true

networks:
  default:
    name: "$DOCKER_NETWORK_NAME"
    external: true
