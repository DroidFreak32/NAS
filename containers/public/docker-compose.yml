version: '3'
name: public-containers

services:

  cloudflaretunnel:
    container_name: cloudflaretunnel
    image: cloudflare/cloudflared:2023.10.0
    environment:
      - TUNNEL_TOKEN=$CLOUDFLARED_TUNNEL_TOKEN
    command: tunnel --no-autoupdate run

# Arch, btw
  mirror:
    build:
      context: .
      dockerfile: Dockerfiles/fancyindex.Dockerfile
      # Avoid strict firewall rules blocking access to internet during build
      network: host
    image: alpine-nginx-site-fancyindex:latest
    container_name: mirror
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # restart: unless-stopped
    # ports:
    #   - 80:80
    #   - 443:443
    environment:
      - DOMAIN=${TRAEFIK_PUBLIC_DOMAIN}
      - SUBDOMAIN=mirror
    volumes:
      # Rsync crontab syncs the mirror
      - /srv/http/mirror/archlinux:/srv/http/mirror/archlinux:ro
      # My TLS certificates from certbot
      - letsencrypt:/etc/letsencrypt:ro
      # Certbot renewal challenges
      ## Update - Not needed due to DNS chllenge
      # - acme-challenge:/var/www/.well-known/acme-challenge
      # Allow to write {access,error}.log
      - /var/log/nginx/mirror.$TRAEFIK_PUBLIC_DOMAIN:/var/log/nginx/mirror.$TRAEFIK_PUBLIC_DOMAIN
      # Main Nginx config containing environment variables
      - ./sites/mirror/mirror.conf:/etc/nginx/templates/template.conf:ro
      # the-eye.eu theme
      - ./sites/mirror/indexui:/var/www/indexui:ro
      # Nginx proxy config for transfer.sh
      # - ./sites/transfer/transfer.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/transfer.$TRAEFIK_PUBLIC_DOMAIN.conf
      # Weechat relay blank page for certbot
      # - ./sites/irc-relay/irc.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/irc.$TRAEFIK_PUBLIC_DOMAIN.conf
      # Nginx proxy config for Your Spotify
      # - ./sites/your-spotify/yspot.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/yspot.$TRAEFIK_PUBLIC_DOMAIN.conf
      # Nginx proxy config for Your Spotify server
      # - ./sites/your-spotify/yspot-api.$TRAEFIK_PUBLIC_DOMAIN.conf:/etc/nginx/http.d/yspot-api.$TRAEFIK_PUBLIC_DOMAIN.conf
      - ./Dockerfiles/fancyindex_entry.sh:/entrypoint.sh:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mirror.rule=Host(`mirror.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.mirror.entrypoints=web"
      - "traefik.http.services.mirror.loadbalancer.server.port=80"

      # Manually forcing https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.mirror.middlewares=redirect-to-https"
      # Instead of above, you can also use any existing Middleware in the traefik yml config's Dynamic Config section
      # comment above two lines and uncomment this
      # - "traefik.http.routers.mirror.middlewares=https-redirectscheme@file"

      # Needs another router for HTTPS
      - "traefik.http.routers.mirror_sec.rule=Host(`mirror.$TRAEFIK_PUBLIC_DOMAIN`) || Host(`mirror.$TRAEFIK_ROOT_DOMAIN`)"
      - "traefik.http.routers.mirror_sec.entrypoints=websecure"
      - "traefik.http.routers.mirror_sec.tls=true"
    # entrypoint: /bin/sh -c "sleep 99999"


  transfer:
    image: dutchcoders/transfer.sh:latest
    container_name: transfer
    command: "--provider local \
      --temp-path /transfer/ \
      --basedir /transfer/ \
      --max-upload-size 3221225 \
      --purge-days 1 \
      --purge-interval 1"
    # ports:
    #   - 8080:8080
    volumes:
      - /srv/transfer:/transfer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transfer.rule=Host(`transfer.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.transfer.entrypoints=web"
      - "traefik.http.services.transfer.loadbalancer.server.port=8080"

      # Manually forcing https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.transfer.middlewares=redirect-to-https"
      # Instead of above, you can also use any existing Middleware in the traefik yml config's Dynamic Config section
      # comment above two lines and add uncomment this
      # - "traefik.http.routers.transfer.middlewares=https-redirectscheme@file"

      # Needs another router for HTTPS
      - "traefik.http.routers.transfer_sec.rule=Host(`transfer.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.transfer_sec.entrypoints=websecure"
      - "traefik.http.routers.transfer_sec.tls=true"


  irc-relay:
    build:
      # Pass UID and GID from env to dockerfile to create non-root user in image
      args:
        UID: "${UID}"
        GID: "${GID}"
      context: .
      dockerfile: Dockerfiles/weechat.Dockerfile
      # Avoid strict firewall rules blocking access to internet during build
      network: host
    # Name and tag of the image
    image: weechat-relay:latest
    container_name: weechat
    environment:
      - MY_DOMAIN=$TRAEFIK_PUBLIC_DOMAIN
      - WEECHAT_HOME=${WEECHAT_HOME}
      - WEECHAT_PASSPHRASE=${WEECHAT_PASSPHRASE}
    # tty: true
    # Run as the current UID:GID of host executing this
    # user: "${UID}:${GID}"
    ports:
      - 9001:9001
    volumes:
      - letsencrypt:/etc/letsencrypt/live:ro
      - ./sites/irc-relay:/weechat
      - ./Dockerfiles/weechat_entry.sh:/weechat_entry.sh
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.irc.rule=Host(`irc.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.irc.entrypoints=web"
      # - "traefik.http.services.irc.loadbalancer.servers.url[0]=http://irc-relay:9001"

      # Manually forcing https
      - "traefik.http.routers.irc.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Needs another router for HTTPS
      - "traefik.http.routers.irc_sec.rule=Host(`irc.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.irc_sec.entrypoints=websecure"
      - "traefik.http.routers.irc_sec.tls=true"
      - "traefik.http.routers.irc_sec.middlewares=redirect-to-glowingbear"

      # # Manually forcing redirect to glowing bear
      - "traefik.http.middlewares.redirect-to-glowingbear.redirectregex.regex=(.*)"
      - "traefik.http.middlewares.redirect-to-glowingbear.redirectregex.replacement=https://latest.glowing-bear.org/"
      - "traefik.http.middlewares.redirect-to-glowingbear.redirectregex.permanent=false"
    # entrypoint: /bin/sh -c "sleep 99999"

  # Mess with script kiddies
  endlessh:
    image: lscr.io/linuxserver/endlessh:latest
    container_name: endlessh
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=Etc/UTC
      - MSDELAY=10000 #optional
      - MAXLINES=32 #optional
      - MAXCLIENTS=4096 #optional
      - LOGFILE=true #optional
      # - BINDFAMILY= #optional
    volumes:
      - /var/log:/config/logs #optional
    ports:
      - 22:2222

########## sharelatex section START ##########

  sharelatex:
    # restart: always
    # Server Pro users:
    # image: quay.io/sharelatex/sharelatex-pro
    image: sharelatex/sharelatex
    container_name: sharelatex
    depends_on:
      mongoinit:
        condition: service_started
      redis:
        condition: service_started
      # mongo:
      #     condition: service_healthy
    links:
      # - mongo
      - redis
    stop_grace_period: 60s
    volumes:
      - ./container_data/sharelatex:/var/lib/sharelatex
      ########################################################################
      ####  Server Pro: Uncomment the following line to mount the docker  ####
      ####             socket, required for Sibling Containers to work    ####
      ########################################################################
      # - /var/run/docker.sock:/var/run/docker.sock
    environment:

      SHARELATEX_APP_NAME: Overleaf Community Edition

      SHARELATEX_MONGO_URL: mongodb://mongo:27017/sharelatex

      # Same property, unfortunately with different names in
      # different locations
      SHARELATEX_REDIS_HOST: redis
      REDIS_HOST: redis

      ENABLED_LINKED_FILE_TYPES: 'project_file,project_output_file'

      # Enables Thumbnail generation using ImageMagick
      ENABLE_CONVERSIONS: 'true'

      # Disables email confirmation requirement
      EMAIL_CONFIRMATION_DISABLED: 'true'

      # temporary fix for LuaLaTex compiles
      # see https://github.com/overleaf/overleaf/issues/695
      TEXMFVAR: /var/lib/sharelatex/tmp/texmf-var

      ## Set for SSL via nginx-proxy
      #VIRTUAL_HOST: 103.112.212.22

      # SHARELATEX_SITE_URL: http://sharelatex.mydomain.com
      # SHARELATEX_NAV_TITLE: Our ShareLaTeX Instance
      # SHARELATEX_HEADER_IMAGE_URL: http://somewhere.com/mylogo.png
      # SHARELATEX_ADMIN_EMAIL: support@it.com

      # SHARELATEX_LEFT_FOOTER: '[{"text": "Powered by <a href=\"https://www.sharelatex.com\">ShareLaTeX</a> 2016"},{"text": "Another page I want to link to can be found <a href=\"here\">here</a>"} ]'
      # SHARELATEX_RIGHT_FOOTER: '[{"text": "Hello I am on the Right"} ]'

      # SHARELATEX_EMAIL_FROM_ADDRESS: "team@sharelatex.com"

      # SHARELATEX_EMAIL_AWS_SES_ACCESS_KEY_ID:
      # SHARELATEX_EMAIL_AWS_SES_SECRET_KEY:

      # SHARELATEX_EMAIL_SMTP_HOST: smtp.mydomain.com
      # SHARELATEX_EMAIL_SMTP_PORT: 587
      # SHARELATEX_EMAIL_SMTP_SECURE: false
      # SHARELATEX_EMAIL_SMTP_USER:
      # SHARELATEX_EMAIL_SMTP_PASS:
      # SHARELATEX_EMAIL_SMTP_TLS_REJECT_UNAUTH: true
      # SHARELATEX_EMAIL_SMTP_IGNORE_TLS: false
      # SHARELATEX_EMAIL_SMTP_NAME: '127.0.0.1'
      # SHARELATEX_EMAIL_SMTP_LOGGER: true
      # SHARELATEX_CUSTOM_EMAIL_FOOTER: "This system is run by department x"

      # ENABLE_CRON_RESOURCE_DELETION: true

      ################
      ## Server Pro ##
      ################

      # SANDBOXED_COMPILES: 'true'

      # SANDBOXED_COMPILES_SIBLING_CONTAINERS: 'true'
      # SANDBOXED_COMPILES_HOST_DIR: '/var/sharelatex_data/data/compiles'

      # DOCKER_RUNNER: 'false'

      ## Works with test LDAP server shown at bottom of docker compose
      # SHARELATEX_LDAP_URL: 'ldap://ldap:389'
      # SHARELATEX_LDAP_SEARCH_BASE: 'ou=people,dc=planetexpress,dc=com'
      # SHARELATEX_LDAP_SEARCH_FILTER: '(uid={{username}})'
      # SHARELATEX_LDAP_BIND_DN: 'cn=admin,dc=planetexpress,dc=com'
      # SHARELATEX_LDAP_BIND_CREDENTIALS: 'GoodNewsEveryone'
      # SHARELATEX_LDAP_EMAIL_ATT: 'mail'
      # SHARELATEX_LDAP_NAME_ATT: 'cn'
      # SHARELATEX_LDAP_LAST_NAME_ATT: 'sn'
      # SHARELATEX_LDAP_UPDATE_USER_DETAILS_ON_LOGIN: 'true'

      # SHARELATEX_TEMPLATES_USER_ID: "578773160210479700917ee5"
      # SHARELATEX_NEW_PROJECT_TEMPLATE_LINKS: '[ {"name":"All Templates","url":"/templates/all"}]'


      # SHARELATEX_PROXY_LEARN: "true"
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sharelatex.rule=Host(`sharelatex.$TRAEFIK_PUBLIC_DOMAIN`)"
      - "traefik.http.routers.sharelatex.entrypoints=websecure"
      - "traefik.http.routers.sharelatex.tls=true"
      - "traefik.http.services.sharelatex.loadbalancer.server.port=80"
    # entrypoint: /bin/sh -c "sleep 99999"
    entrypoint: /bin/sh -c "tlmgr update --self; tlmgr install preprint titlesec marvosym enumitem xcolor fontawesome5; /sbin/my_init"

  mongoinit:
    container_name: mongoinit
    image: mongo:4.4
    # this container will exit after executing the command
    restart: "no"
    # depends_on:
    #   mongo:
    #     condition: service_healthy
    entrypoint:
      [
        "mongo",
        "--host",
        "mongo:27017",
        "--eval",
        'rs.initiate({ _id: "overleaf", members: [ { _id: 0, host: "mongo:27017" } ] })',
      ]

  redis:
      # restart: always
      image: redis:6.2
      container_name: redis
      expose:
          - 6379
      volumes:
          - ./container_data/redis:/data

########## sharelatex section END ##########


volumes:
  letsencrypt:
    external: true
  # Update - Not needed due to DNS chllenge
  # acme-challenge:
  #   external: true

networks:
  default:
    name: "$DOCKER_NETWORK_NAME"
    external: true

########### Older compose files   ###########

  # ys_server:
  #   image: yooooomi/your_spotify_server
  #   container_name: ys_server
  #   restart: always
  #   # Can be commented as we are using nginx to connect directly to this container
  #   # ports:
  #   #   - "8081:8080"
  #   links:
  #     - ys_mongo
  #   depends_on:
  #     - ys_mongo
  #   environment:
  #     API_ENDPOINT: https://yspot-api.$TRAEFIK_PUBLIC_DOMAIN
  #     # API_ENDPOINT: https://yspot.$TRAEFIK_PUBLIC_DOMAIN/api
  #     CLIENT_ENDPOINT: https://yspot.$TRAEFIK_PUBLIC_DOMAIN
  #     # .env file
  #     SPOTIFY_PUBLIC: ${SPOTIFY_PUBLIC}
  #     SPOTIFY_SECRET: ${SPOTIFY_SECRET}

  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.yspot-api.rule=Host(`yspot-api.$TRAEFIK_PUBLIC_DOMAIN`)"
  #     - "traefik.http.routers.yspot-api.entrypoints=web"
  #     - "traefik.http.services.yspot-api.loadbalancer.server.port=8080"

  #     # Manually forcing https
  #     - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
  #     - "traefik.http.routers.yspot-api.middlewares=redirect-to-https"
  #     # Instead of above, you can also use any existing Middleware in the traefik yml config's Dynamic Config section
  #     # comment above two lines and add uncomment this
  #     # - "traefik.http.routers.yspot-api.middlewares=https-redirectscheme@file"

  #     # Needs another router for HTTPS
  #     - "traefik.http.routers.yspot-api_sec.rule=Host(`yspot-api.$TRAEFIK_PUBLIC_DOMAIN`)"
  #     - "traefik.http.routers.yspot-api_sec.entrypoints=websecure"
  #     - "traefik.http.routers.yspot-api_sec.tls=true"

  # # The actual webpage to connect to
  # ys_web:
  #   image: yooooomi/your_spotify_client
  #   container_name: ys_web
  #   restart: always
  #   # Can be commented as we are using nginx to connect directly to this container
  #   # ports:
  #   #   - "8082:3000"
  #   environment:
  #     API_ENDPOINT: https://yspot-api.$TRAEFIK_PUBLIC_DOMAIN
  #     # API_ENDPOINT: https://yspot.$TRAEFIK_PUBLIC_DOMAIN/api

  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.yspot.rule=Host(`yspot.$TRAEFIK_PUBLIC_DOMAIN`)"
  #     - "traefik.http.routers.yspot.entrypoints=web"
  #     - "traefik.http.services.yspot.loadbalancer.server.port=3000"

  #     # Manually forcing https
  #     - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
  #     - "traefik.http.routers.yspot.middlewares=redirect-to-https"
  #     # Instead of above, you can also use any existing Middleware in the traefik yml config's Dynamic Config section
  #     # comment above two lines and add uncomment this
  #     # - "traefik.http.routers.yspot.middlewares=https-redirectscheme@file"

  #     # Needs another router for HTTPS
  #     - "traefik.http.routers.yspot_sec.rule=Host(`yspot.$TRAEFIK_PUBLIC_DOMAIN`)"
  #     - "traefik.http.routers.yspot_sec.entrypoints=websecure"
  #     - "traefik.http.routers.yspot_sec.tls=true"
